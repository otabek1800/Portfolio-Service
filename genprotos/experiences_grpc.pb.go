// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: experiences.proto

package genprotos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExperienceServiceClient is the client API for ExperienceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExperienceServiceClient interface {
	CreateExperience(ctx context.Context, in *Experience, opts ...grpc.CallOption) (*Void, error)
	DeleteExperience(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
	UpdateExperience(ctx context.Context, in *Experience, opts ...grpc.CallOption) (*Void, error)
	GetByIdExperience(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Experience, error)
	GetAllExperience(ctx context.Context, in *Experience, opts ...grpc.CallOption) (*GetAllExperiences, error)
}

type experienceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExperienceServiceClient(cc grpc.ClientConnInterface) ExperienceServiceClient {
	return &experienceServiceClient{cc}
}

func (c *experienceServiceClient) CreateExperience(ctx context.Context, in *Experience, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/protos.ExperienceService/CreateExperience", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experienceServiceClient) DeleteExperience(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/protos.ExperienceService/DeleteExperience", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experienceServiceClient) UpdateExperience(ctx context.Context, in *Experience, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/protos.ExperienceService/UpdateExperience", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experienceServiceClient) GetByIdExperience(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Experience, error) {
	out := new(Experience)
	err := c.cc.Invoke(ctx, "/protos.ExperienceService/GetByIdExperience", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experienceServiceClient) GetAllExperience(ctx context.Context, in *Experience, opts ...grpc.CallOption) (*GetAllExperiences, error) {
	out := new(GetAllExperiences)
	err := c.cc.Invoke(ctx, "/protos.ExperienceService/GetAllExperience", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExperienceServiceServer is the server API for ExperienceService service.
// All implementations must embed UnimplementedExperienceServiceServer
// for forward compatibility
type ExperienceServiceServer interface {
	CreateExperience(context.Context, *Experience) (*Void, error)
	DeleteExperience(context.Context, *ById) (*Void, error)
	UpdateExperience(context.Context, *Experience) (*Void, error)
	GetByIdExperience(context.Context, *ById) (*Experience, error)
	GetAllExperience(context.Context, *Experience) (*GetAllExperiences, error)
	mustEmbedUnimplementedExperienceServiceServer()
}

// UnimplementedExperienceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExperienceServiceServer struct {
}

func (UnimplementedExperienceServiceServer) CreateExperience(context.Context, *Experience) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExperience not implemented")
}
func (UnimplementedExperienceServiceServer) DeleteExperience(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExperience not implemented")
}
func (UnimplementedExperienceServiceServer) UpdateExperience(context.Context, *Experience) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExperience not implemented")
}
func (UnimplementedExperienceServiceServer) GetByIdExperience(context.Context, *ById) (*Experience, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByIdExperience not implemented")
}
func (UnimplementedExperienceServiceServer) GetAllExperience(context.Context, *Experience) (*GetAllExperiences, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllExperience not implemented")
}
func (UnimplementedExperienceServiceServer) mustEmbedUnimplementedExperienceServiceServer() {}

// UnsafeExperienceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExperienceServiceServer will
// result in compilation errors.
type UnsafeExperienceServiceServer interface {
	mustEmbedUnimplementedExperienceServiceServer()
}

func RegisterExperienceServiceServer(s grpc.ServiceRegistrar, srv ExperienceServiceServer) {
	s.RegisterService(&ExperienceService_ServiceDesc, srv)
}

func _ExperienceService_CreateExperience_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Experience)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperienceServiceServer).CreateExperience(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ExperienceService/CreateExperience",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperienceServiceServer).CreateExperience(ctx, req.(*Experience))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperienceService_DeleteExperience_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperienceServiceServer).DeleteExperience(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ExperienceService/DeleteExperience",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperienceServiceServer).DeleteExperience(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperienceService_UpdateExperience_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Experience)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperienceServiceServer).UpdateExperience(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ExperienceService/UpdateExperience",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperienceServiceServer).UpdateExperience(ctx, req.(*Experience))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperienceService_GetByIdExperience_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperienceServiceServer).GetByIdExperience(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ExperienceService/GetByIdExperience",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperienceServiceServer).GetByIdExperience(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperienceService_GetAllExperience_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Experience)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperienceServiceServer).GetAllExperience(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ExperienceService/GetAllExperience",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperienceServiceServer).GetAllExperience(ctx, req.(*Experience))
	}
	return interceptor(ctx, in, info, handler)
}

// ExperienceService_ServiceDesc is the grpc.ServiceDesc for ExperienceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExperienceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.ExperienceService",
	HandlerType: (*ExperienceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateExperience",
			Handler:    _ExperienceService_CreateExperience_Handler,
		},
		{
			MethodName: "DeleteExperience",
			Handler:    _ExperienceService_DeleteExperience_Handler,
		},
		{
			MethodName: "UpdateExperience",
			Handler:    _ExperienceService_UpdateExperience_Handler,
		},
		{
			MethodName: "GetByIdExperience",
			Handler:    _ExperienceService_GetByIdExperience_Handler,
		},
		{
			MethodName: "GetAllExperience",
			Handler:    _ExperienceService_GetAllExperience_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "experiences.proto",
}
